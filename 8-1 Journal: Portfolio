# CS-305-8-1-Journal-Portfolio
What was the problem you were solving in the projects for this course? The client, Artemis Financial, needed to secure its software because it handles sensitive financial information such as retirement plans, insurance, and savings data. The main problem was that their application contained multiple vulnerabilities—like weak password hashing, hardcoded credentials, and outdated third-party libraries—that put client data at risk. My task was to identify these weaknesses and recommend steps to fix them so the company could protect its data, follow regulations, and maintain customer trust.
What did you do well when you found your client’s software security vulnerabilities? Why is it important to code securely? What value does software security add to a company’s overall well-being? I did well at systematically reviewing both the source code and third-party libraries. I spotted outdated practices like MD5 hashing, insecure error handling, and permissive CORS policies. It is important to code securely because even small mistakes can lead to serious breaches. Secure software protects customer data, keeps the company compliant with laws, prevents financial losses, and maintains the company’s reputation.
Which part of the vulnerability assessment was challenging or helpful to you? The static testing with dependency-check was especially helpful because it revealed critical vulnerabilities in widely used libraries like Spring and Log4j. The challenging part was piecing together how each vulnerability could be exploited in the real world and then translating that into clear recommendations the client could act on.
How did you increase layers of security? In the future, what would you use to assess vulnerabilities and decide which mitigation techniques to use? I suggested multiple layers of protection, such as stronger password hashing (bcrypt or Argon2), session management improvements, input validation, access controls, and updating vulnerable dependencies. In the future, I would use tools like OWASP Dependency-Check, automated CI/CD security scans, and penetration testing frameworks to catch vulnerabilities early and decide on the best fixes.
How did you make certain the code and software application were functional and secure? After refactoring the code, how did you check to see whether you introduced new vulnerabilities? I focused on making sure changes, like stronger authentication and error handling, did not break the application’s core functions. I validated functionality through testing and re-ran vulnerability scans to check that fixes did not create new issues. Regular retesting ensures both functionality and security are maintained.
What resources, tools, or coding practices did you use that might be helpful in future assignments or tasks? I used the OWASP Dependency-Check tool, static code analysis, and secure coding practices such as input validation, encryption, and environment-based configuration. These tools and habits will be useful in any future project, especially in secure software development and DevSecOps environments.
Employers sometimes ask for examples of work that you have successfully completed to show your skills, knowledge, and experience. What might you show future employers from this assignment? I could show employers my vulnerability assessment report for Artemis Financial. It demonstrates that I can analyze an application, identify security risks, and propose realistic solutions. It also highlights my ability to balance technical security fixes with practical business needs, a skill valuable for any software engineering or security-focused role.






